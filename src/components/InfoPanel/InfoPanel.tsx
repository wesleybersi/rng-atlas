import { useEffect, useState } from "react";

import { oneIn, random } from "../../game/utils/helper-functions";
import useStore from "../../store/store";
import styles from "./styles.module.scss";

import { SlFlag as IconFlag } from "react-icons/sl";

const InfoPanel = () => {
  const { selection, emitter, clientData } = useStore();

  const [temperatures, setTemperatures] = useState<{
    min: number;
    max: number;
  }>({
    min: 0,
    max: 0,
  });

  useEffect(() => {
    if (!selection.formation || !selection.country) return;

    const climate = selection.formation.climate;
    if (!climate) return;
    setTemperatures({
      min: climate.temperatures.min - random(4) + random(8),
      max: climate.temperatures.max + random(4) - random(8),
    });
  }, [selection.massIndex, selection.country?.name, selection.formation?.name]);
  const [populationSize] = useState<number>(
    calculatePopulationSize(
      selection.formation?.landmasses[selection.massIndex ?? 0].size,
      selection.formation?.climate.name ?? ""
    )
  );

  if (
    (clientData.selectMode === "Landmass" && !selection.formation) ||
    (clientData.selectMode === "Country" && !selection.country)
  )
    return (
      <section className={styles.wrapper}>
        <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
          <p>
            <span className="b">Left click</span> on a{" "}
            {clientData.selectMode === "Country" ? "country" : "landmass"} to
            learn more about it.
          </p>
          {/* <p>All data is procedurally generated by an AI infused algoritm.</p> */}
        </div>
        <div className={styles.selection}>
          <div className={styles.options}>
            <div style={{ display: "flex", alignItems: "center", gap: "1rem" }}>
              <button
                className={styles.option}
                style={
                  clientData.selectMode === "Country"
                    ? {
                        outline: "2px solid white",
                      }
                    : {}
                }
                onClick={() =>
                  emitter?.emit(
                    "Select Mode",
                    clientData.selectMode === "Landmass"
                      ? "Country"
                      : "Landmass"
                  )
                }
              >
                <IconFlag size="24px" />
              </button>
              <p className="b">
                {clientData.selectMode === "Landmass"
                  ? "Country view disabled"
                  : "Country view enabled"}
              </p>
            </div>
          </div>
        </div>
      </section>
    );

  if (
    clientData.selectMode === "Landmass" &&
    selection.formation &&
    selection.massIndex !== null
  )
    return (
      <section className={styles.wrapper}>
        <div>
          <span className="b">Landmass:</span> {selection.formation.name}
        </div>
        <div>
          <span className="b">Part of formation:</span>{" "}
          {selection.formation.name}
        </div>
        <div>
          <span className="b">Climate:</span> {selection.formation.climate.name}
        </div>
        <div>
          <span className="b">Temperatures:</span> {temperatures.min}C to{" "}
          {temperatures.max}C
        </div>
        <div>
          <span className="b">Expanse: </span>
          {selection.formation.landmasses[selection.massIndex].size} km
          <sup>&sup2;</sup>
        </div>
        {/* <div className={styles.countrylist}>
          <span className="b">Countries on landmass:</span>
          <div className={styles.listedcountry}>
            <div className={styles.dot}></div>
            <span className="b">Nederland</span>
          </div>
        </div> */}
      </section>
    );

  if (clientData.selectMode === "Country" && selection.country)
    return (
      <section className={styles.wrapper}>
        <div className={styles.name}>
          <h2>{selection.country.name}</h2>
        </div>
        <div
          style={{
            position: "absolute",
            right: "1rem",
            display: "flex",
            flexDirection:
              selection.country.flagType === "Vertical" ? "column" : "row",
            marginBottom: "2rem",
            width: "6rem",
            height: "4rem",
          }}
        >
          {selection.country.flag.map((color, index) =>
            (selection.country?.flagType === "Circle" && index === 1) ||
            (selection.country?.flagType === "Square" && index === 1) ? (
              <div
                style={{
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  width: "50%",
                  transform: "translate(-50%,-50%)",
                  aspectRatio: "1",
                  borderRadius:
                    selection.country.flagType === "Circle" ? "50%" : "",
                  backgroundColor: color,
                }}
              ></div>
            ) : (
              <div
                style={{
                  flex: selection.country?.flagFlex[index],
                  backgroundColor: color,
                }}
              >
                <span style={{ opacity: 0 }}>p</span>
              </div>
            )
          )}
        </div>
        <div>
          <span className="b">Capital:</span> {selection.country.capital}
        </div>
        <div>
          <span className="b">Government: </span>
          {selection.country.governance.type.style}{" "}
        </div>
        <div>
          <span className="b">Leader:</span>{" "}
          {selection.country.governance.type.title}{" "}
          {selection.country.governance.leader}
        </div>

        <div>
          <span className="b">Part of landmass:</span>{" "}
          {selection.formation?.name}
        </div>
        <div>
          <span className="b">Climate:</span>{" "}
          {selection.formation?.climate.name}
        </div>
        <div>
          <span className="b">Temperatures:</span> {temperatures.min}C to{" "}
          {temperatures.max}C
        </div>
        <div>
          <span className="b">Expanse: </span>
          {selection.country.squares.size} km
          <sup>&sup2;</sup>
        </div>
        <div>
          <span className="b">Population: </span>
          {populationSize}
        </div>
        <div>
          <p>{selection.country.description}</p>
        </div>
      </section>
    );
  return <></>;
};

export default InfoPanel;

function calculatePopulationSize(size: number | undefined, climate: string) {
  if (size === undefined) return 0;
  // Define the population density range in persons per square kilometer
  const minDensity = 1; // Minimum density
  const maxDensity = 100; // Maximum density

  // Generate a random population density within the range
  const density =
    Math.floor(Math.random() * (maxDensity - minDensity + 1)) + minDensity;

  // Calculate the population size based on landmass size and density
  let population = Math.round(size * density);

  if (climate === "Polar") {
    population /= 10;
  }
  if (oneIn(10)) population = 0;
  if (oneIn(3)) population /= random(10);
  if (oneIn(6)) population *= random(3);
  return Math.floor(population);
}
